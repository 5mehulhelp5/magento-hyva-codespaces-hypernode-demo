worker_processes auto;
worker_rlimit_nofile 169152;

pid /var/run/nginx/nginx.pid;

events {
    worker_connections 768;
    multi_accept on;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 4096;
    server_tokens off;

    # Increase buffer sizes to prevent "upstream sent too big header" errors
    fastcgi_buffer_size 32k;
    fastcgi_buffers 4 32k;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging Settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip Settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    
    # Other Configs
    include /etc/nginx/conf.d/*.conf;

    upstream fastcgi_backend {
        server 127.0.0.1:9000;
    }

    server {
        listen 0.0.0.0:8080;

        # The placeholder is replaced by the start_services.sh script
        set $MAGE_ROOT __CODESPACES_REPO_ROOT__;
        root $MAGE_ROOT/pub;

        index index.php;
        autoindex off;
        charset UTF-8;
        error_page 404 403 = /errors/404.php;

        # Deny access to sensitive files
        location /.user.ini {
            deny all;
        }

        # Main routing for the site
        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }
        
        # This block is crucial for serving media files correctly.
        location /media/ {
            try_files $uri $uri/ /get.php?$query_string;

            location ~* \.(ico|jpg|jpeg|png|gif|svg|js|css|swf|eot|ttf|otf|woff|woff2)$ {
                add_header Cache-Control "public";
                add_header X-Frame-Options "SAMEORIGIN";
                expires +1y;
                try_files $uri $uri/ /get.php?$query_string;
            }
            location ~* \.(zip|gz|gzip|bz2|csv|xml)$ {
                add_header Cache-Control "no-store";
                add_header X-Frame-Options "SAMEORIGIN";
                expires off;
                try_files $uri $uri/ /get.php?$query_string;
            }
            add_header X-Frame-Options "SAMEORIGIN";
        }

        # This block is crucial for serving static files correctly.
        # It tries to find the file, and if it doesn't exist, it passes the request
        # to static.php to be generated on the fly.
        location /static/ {
            # Remove signature of the static files that is used to overcome browser cache
            location ~ ^/static/version {
                rewrite ^/static/(version\d*/)?(.*)$ /static/$2 last;
            }
            if (!-f $request_filename) {
                rewrite ^/static/(version\d*/)?(.*)$ /static.php?resource=$2 last;
            }
            add_header X-Frame-Options "SAMEORIGIN";
        }
        
        # This is the main PHP entry point for Magento.
        # It now includes the necessary parameters to handle the Codespaces proxy.
        location ~ ^/(index|get|static|report|errors/report|errors/404|errors/503|health_check)\.php$ {
            try_files $uri =404;
            fastcgi_pass   fastcgi_backend;
            
            # This block is the key fix. It ensures the correct headers are passed to PHP-FPM.
            fastcgi_param HTTP_HOST $http_x_forwarded_host;
            fastcgi_param HTTPS 'on';
            fastcgi_param SERVER_PORT 443;
            fastcgi_param REQUEST_SCHEME 'https';

            # Include standard FastCGI parameters
            include        fastcgi_params;
            fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }

        # Banned locations to prevent direct access to other PHP files
        location ~* \.php$ {
            deny all;
        }
    }
}
